import os

try:
	import lit.util
	import lit.formats
except ImportError:
	pass


config.name = "smartace"
config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.sol']
config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = lit_config.params.get('test_dir', '.')

config.environment['PATH'] = os.environ['PATH']
if 'LD_LIBRARY_PATH' in os.environ:
	config.environment['LD_LIBRARY_PATH'] = os.environ['LD_LIBRARY_PATH']

def getCmd(cmds):
	exe = None
	for cmd in cmds:
		if cmd.upper() in os.environ:
			exe = os.environ[cmd.replace('+', 'p').upper().replace('-', '_')]
		else:
			exe = lit.util.which(cmd, config.environment['PATH'])
		if exe:
			break
	if not exe or not os.path.isfile(exe) or not os.access(exe, os.X_OK):
		lit_config.fatal('Could not find executable: {}'.format(cmd))
	lit_config.note('Found {}: {}'.format(cmd, exe))
	return exe

def getPath(envar):
	path = os.environ.get(envar, None)
	if path and os.path.isdir(path):
		lit_config.note('Found {}: {}'.format(envar, path))
		return path
	else:
		lit_config.fatal('Could not find path variable: {}'.format(envar))

def getArgs(arg):
	val = os.environ.get(arg, None)
	if val:
		return val
	else:
		return ''

cmake_cmd = getCmd(['cmake'])
solc_cmd = getCmd(['solc'])
clang_cmd = getCmd(['clang-10', 'clang-mp-10', 'clang'])
clangpp_cmd = getCmd(['clang++-10', 'clang++-mp-10', 'clang++'])

sea_path = getPath('SEA_PATH')

klee_path = getPath('KLEE_PATH')
klee_lib = getPath('KLEE_LIB')

cmake_args = getArgs('BUILD_ARGS')

config.substitutions.append(('%cmake', cmake_cmd))
config.substitutions.append(('%solc', solc_cmd))
config.substitutions.append(('%clangc', clang_cmd))
config.substitutions.append(('%clangpp', clangpp_cmd))
config.substitutions.append(('%seapath', sea_path))
config.substitutions.append(('%kleepath', klee_path))
config.substitutions.append(('%kleelib', klee_lib))
config.substitutions.append(('%buildargs', cmake_args))
